#lang racket
(define (char->list lst)
  (if (empty? lst)
      (list)
      (append (list (string (car lst))) (char->list (cdr lst)))
  )
)
(define (str->list str)
  (char->list (string->list str))
)
(str->list "Kemal")
;;(convert "(1 2 3 4 5)")
(define (num->list n)
  (local 
    ((define (num->list n)
       (map (lambda (c)
              (char->num c))
            (string->list (number->string n))))

    (define (char->num c)
      (- (char->integer c) 48)))

    (num->list n)))
(num->list 12345)
(define (bytes->list bytes)
  (str->list (bytes->string/utf-8 bytes))
)
(bytes->list #"Kemal")
(define (symbol->list symbol)
  (str->list (symbol->string symbol))
)
(symbol->list 'Kemal)
(define (keyword->list keyword)
  (str->list (keyword->string keyword))
)
(keyword->list '#:Kemal)
(vector->list #("K" "e" "m" "a" "l"))


(define (splitList val)
  (cond
    ((list? val) (str->list (car val)))
    ((boolean? val) (list val))
    ((string? val) (str->list val))
    ((keyword? val) (keyword->list val))
    ((vector? val) (splitList (vector->list val)))
    ((number? val) (num->list val))
    ("Couldn't be found!")
  )
)
(newline)
"Testing splitList"
(splitList '("Kemal"))
(splitList #t)
(splitList "Kemal")
(splitList '#:Kemal)
(splitList #("Kemal"))
(splitList 12342356)